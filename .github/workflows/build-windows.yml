name: Build Windows Kits
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [main]

env:
  TCL_TK_VERSION: 8.6.17
  CC: x86_64-w64-mingw32-clang.exe
  CXX: x86_64-w64-mingw32-clang++.exe
  CFLAGS:   '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  CPPFLAGS: '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  CXXFLAGS: '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  AR: llvm-ar.exe
  RANLIB: llvm-ranlib.exe
  STRIP: llvm-strip.exe
  NM: llvm-nm.exe
  RC: llvm-windres.exe
  KC_KITSH_LIBS: /clang64/lib/libdl.a
  KC_KITSH_LDFLAGS: '-Wl,--gc-sections'
  KC_TLS_SSLDIR: /clang64/lib/pkgconfig
  KC_TLS_LINKSSLSTATIC: 1
  STATICTWAPI: 1
  STATICCFFI: 1
  STATICTK: 0
  STATICTKSVG: 0
  STATICTLS: 1
  STATICTDOM: 1
  STATICPARSE_ARGS: 1
  STATICTCLLIB: 1
  STATICMK4: 1
  KITCREATOR_PKGS: twapi

jobs:
  build-windows-kits:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Install DigiCert Client tools
        id: install_digicert_tools
        if: ${{ github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/') }}
        uses: digicert/ssm-code-signing@v1.1.0

      - name: Setup Digicert
        if: ${{ steps.install_digicert_tools.outcome == 'success' }}
        shell: pwsh
        run: |
          echo "${{ secrets.SM_CLIENT_CERT_FILE_B64 }}" | openssl base64 -d > D:\Certificate_pkcs12.p12
          echo "SM_HOST=${{ secrets.SM_HOST }}" >> $env:GITHUB_ENV
          echo "SM_API_KEY=${{ secrets.SM_API_KEY }}" >> $env:GITHUB_ENV
          echo "SM_CLIENT_CERT_FILE=D:\Certificate_pkcs12.p12" >> $env:GITHUB_ENV
          echo "SM_CLIENT_CERT_PASSWORD=${{ secrets.SM_CLIENT_CERT_PASSWORD }}" >> $env:GITHUB_ENV
          echo "SM_FINGERPRINT=${{ secrets.SM_FINGERPRINT }}" >> $env:GITHUB_ENV
          echo "SM_PKCS11_CONFIG=$env:TEMP\smtools-windows-x64\pkcs11properties.cfg" >> $env:GITHUB_ENV

          # For signtool
          echo "C:\Program Files (x86)\Windows Kits\10\bin\10.0.22621.0\x64" >> $env:GITHUB_PATH

          # For smctl
          echo "$env:TEMP\smtools-windows-x64" >> $env:GITHUB_PATH

      - name: Sync DigiCert certificates
        if: ${{ steps.install_digicert_tools.outcome == 'success' }}
        shell: pwsh
        run: |
          smctl windows certsync 2>&1 | Out-Null

      - uses: msys2/setup-msys2@v2
        with:
          msystem:   CLANG64
          update:    true
          path-type: inherit
          install: >-
            git
            patch
            mingw-w64-clang-x86_64-autotools
            mingw-w64-clang-x86_64-toolchain
            mingw-w64-clang-x86_64-dlfcn
            mingw-w64-clang-x86_64-openssl
            mingw-w64-clang-x86_64-libffi
            mingw-w64-clang-x86_64-cmake

      - uses: actions/checkout@v4

      - name: Minimal kit (No GUI)
        run: |
          export KITCREATOR_PKGS="${KITCREATOR_PKGS} $(awk '{printf "%s ", $0}' .github/workflows/pkgs-nogui-minimal.txt)"
          ./build/pre.sh
          ./kitcreator build ${{env.TCL_TK_VERSION}} --enable-64bit --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}}.exe tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe
          echo "$KITCREATOR_PKGS" > tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe.kc_packages
          cat <<EOF > $GITHUB_ENV
          TCLKIT=$(pwd)/tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe
          TCLSH_NATIVE=$(pwd)/tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe
          EOF

      - name: Minimal kit (with GUI)
        run: |
          export KITCREATOR_PKGS="${KITCREATOR_PKGS} $(awk '{printf "%s ", $0}' .github/workflows/pkgs-gui-minimal.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-64bit --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}}.exe tclkit-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe
          echo "$KITCREATOR_PKGS" > tclkit-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe.kc_packages
          rm -f  tk/.success
          rm -rf tk/{out,inst,build}

      - name: Standard kit (No GUI)
        run: |
          export KITCREATOR_PKGS="${KITCREATOR_PKGS} $(awk '{printf "%s ", $0}' .github/workflows/pkgs-nogui-full.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-64bit --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}}.exe tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.exe
          echo "$KITCREATOR_PKGS" > tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.exe.kc_packages

      - name: Full kit (with GUI)
        run: |
          export KITCREATOR_PKGS="${KITCREATOR_PKGS} $(awk '{printf "%s ", $0}' .github/workflows/pkgs-gui-full.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-64bit --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}}.exe tclkit-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.exe
          echo "$KITCREATOR_PKGS" > tclkit-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.exe.kc_packages

      - name: Kit SDK
        env:
          STATICTK: 1
        run: |
          export KITCREATOR_PKGS="${KITCREATOR_PKGS} $(awk '{printf "%s ", $0}' .github/workflows/pkgs-kitdll.txt)"
          clean_all_but_tcl_and_mk4() {
            for pkg in $(ls */build.sh | cut -d/ -f1 | egrep -v '^(tcl|tls|tdom|parse_args|mk4tcl|tcllib)$'); do
              rm -f  "${pkg}/.success"
              rm -rf "${pkg}/out" "${pkg}/inst" "${pkg}/build"
            done
          }
          clean_all_but_tcl_and_mk4
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-64bit --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv libtclkit-sdk-${{env.TCL_TK_VERSION}}.tar.gz libtclkit-sdk-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.tar.gz
          echo "$KITCREATOR_PKGS" > libtclkit-sdk-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.tar.gz.kc_packages

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-windows-logs
          path: |
            **/build.log
            **/config.log
        if: ${{ !cancelled() }}

      - name: Upload kits
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-windows-kits
          path: |
            tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe
            tclkit-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32-minimal.exe
            tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.exe
            tclkit-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.exe
            libtclkit-sdk-${{env.TCL_TK_VERSION}}-x86_64-w64-mingw32.tar.gz
        if: ${{ !cancelled() }}

      - name: Upload kit package list
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-windows-kc_packages
          path: |
            *.kc_packages
        if: ${{ !cancelled() }}
