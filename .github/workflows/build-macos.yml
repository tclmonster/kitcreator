name: Build macOS kits
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [main]

env:
  TCL_TK_VERSION: 8.6.16
  CC: /usr/bin/clang
  CXX: /usr/bin/clang++
  KC_TLS_LINKSSLSTATIC: 1
  STATICTK: 0
  STATICTKSVG: 0
  STATICTLS: 1
  STATICTDOM: 1
  STATICPARSE_ARGS: 1
  STATICTCLLIB: 1
  STATICMK4: 1
  CFLAGS:   '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  CPPFLAGS: '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  CXXFLAGS: '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  KC_KITSH_LDFLAGS: '-Wl,-dead_strip'
  CODESIGN_SIGNATURE: ${{ secrets.CODESIGN_SIGNATURE }}
  CODESIGN_PREFIX: com.bandoti.

jobs:
  build-macos-kits:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Packages
        run: |
          brew update
          brew install autoconf automake libtool groff cmake openssl@3 curl create-dmg
          cat <<EOF >> $GITHUB_ENV
          KC_TLS_SSLDIR=$(brew --prefix openssl@3)
          EOF

      - name: Import Code Signing Certificate
        env:
          CERTIFICATE_BASE64:   ${{ secrets.CERTIFICATE_BASE64 }}
          CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD:    ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create a temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate (use empty string if no password was set)
          echo "$CERTIFICATE_BASE64" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "${CERTIFICATE_PASSWORD:-}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Clean up certificate file
          rm certificate.p12

      - name: Setup environment
        run: |
          arch=$(uname -m)
          os=$(echo "$(uname)$(uname -r)" | tr '[:upper:]' '[:lower:]')
          cat <<EOF > $GITHUB_ENV
          suffix=${arch}-apple-${os}
          EOF

      - name: Basekit
        run: |
          export KITCREATOR_PKGS="itcl mk4tcl"
          ./build/pre.sh
          ./kitcreator build ${{env.TCL_TK_VERSION}}
          mv tclkit-${{env.TCL_TK_VERSION}} tclkit-local
          cat <<EOF > $GITHUB_ENV
          TCLKIT=$(pwd)/tclkit-local
          TCLSH_NATIVE=$(pwd)/tclkit-local
          EOF

      - name: Minimal kit (No GUI)
        run: |
          export KITCREATOR_PKGS="$(awk '{printf "%s ", $0}' .github/workflows/pkgs-nogui-minimal.txt)"
          ./kitcreator build ${{env.TCL_TK_VERSION}} --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}} tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
          echo "$KITCREATOR_PKGS" > tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal.kc_packages

      - name: Minimal kit (With GUI)
        run: |
          export KITCREATOR_PKGS="$(awk '{printf "%s ", $0}' .github/workflows/pkgs-gui-minimal.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-aqua --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}} tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
          echo "$KITCREATOR_PKGS" > tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal.kc_packages
          rm -f  tk/.success
          rm -rf tk/{out,inst,build}

      - name: Standard kit (No GUI)
        run: |
          export KITCREATOR_PKGS="$(awk '{printf "%s ", $0}' .github/workflows/pkgs-nogui-full.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}} tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}
          echo "$KITCREATOR_PKGS" > tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}.kc_packages

      - name: Full kit (with GUI)
        run: |
          export KITCREATOR_PKGS="$(awk '{printf "%s ", $0}' .github/workflows/pkgs-gui-full.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-aqua --enable-tcl-private-headers --enable-kit-storage=cvfs --with-compressed-cvfs
          mv tclkit-${{env.TCL_TK_VERSION}} tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}
          echo "$KITCREATOR_PKGS" > tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}.kc_packages

      - name: Kit SDK
        env:
          STATICTK: 1
        run: |
          export KITCREATOR_PKGS="$(awk '{printf "%s ", $0}' .github/workflows/pkgs-kitdll.txt)"
          clean_all_but_tcl_and_mk4() {
            for pkg in $(ls */build.sh | cut -d/ -f1 | egrep -v '^(tcl|tls|tdom|parse_args|mk4tcl|tcllib)$'); do
              rm -f  "${pkg}/.success"
              rm -rf "${pkg}/out" "${pkg}/inst" "${pkg}/build"
            done
          }
          clean_all_but_tcl_and_mk4
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-aqua --enable-tcl-private-headers --enable-kit-storage=mk4
          mv libtclkit-sdk-${{env.TCL_TK_VERSION}}.tar.gz libtclkit-sdk-${{env.TCL_TK_VERSION}}-${{env.suffix}}.tar.gz
          echo "$KITCREATOR_PKGS" > libtclkit-sdk-${{env.TCL_TK_VERSION}}-${{env.suffix}}.tar.gz.kc_packages

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-macos-logs
          path: |
            **/build.log
            **/config.log
        if: ${{ !cancelled() }}

      - name: Notarize binaries
        env:
          APPLE_ID:          ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID:           ${{ secrets.TEAM_ID }}
        run: |
          echo "Creating notarization package..."
          zip -r tclkits-${{env.TCL_TK_VERSION}}-${{env.suffix}}-signed.zip \
            tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal \
            tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal \
            tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}} \
            tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}

          echo "Submitting for notarization..."
          xcrun notarytool submit tclkits-${{env.TCL_TK_VERSION}}-${{env.suffix}}-signed.zip \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$TEAM_ID" \
            --wait > notarization_result.txt 2>&1

          if grep -q "status: Accepted" notarization_result.txt; then
            echo "✅ Notarization completed successfully!"
            cat notarization_result.txt

          elif grep -q "status: Invalid" notarization_result.txt; then
            echo "❌ Notarization failed with status: Invalid"
            cat notarization_result.txt

            # Extract submission ID and get detailed logs
            SUBMISSION_ID=$(grep "id:" notarization_result.txt | head -1 | awk '{print $2}')
            if test ! -z "$SUBMISSION_ID"; then
              echo "Getting detailed error logs for submission: $SUBMISSION_ID"
              xcrun notarytool log "$SUBMISSION_ID" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_ID_PASSWORD" \
                --team-id "$TEAM_ID"
            fi
            exit 1

          else
            echo "❌ Notarization failed with unknown status"
            cat notarization_result.txt
            exit 1
          fi

          echo "Verifying notarized binaries..."
          for binary in tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal \
                       tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal \
                       tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}} \
                       tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}; do
            echo "Testing $binary with Gatekeeper..."
            spctl -a -t exec -vv "$binary" && \
              echo "✅ $binary: Gatekeeper accepts (notarization successful)" || \
              echo "⚠️  $binary: May require user intervention on first launch"

            # Show what source Gatekeeper sees
            spctl -a -t exec -vv "$binary" 2>&1 | grep "source=" || echo "No source info available"
          done

      - name: Upload kitcreator output
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-macos-kits
          path: |
            tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
            tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
            tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}
            tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}
            libtclkit-sdk-${{env.TCL_TK_VERSION}}-${{env.suffix}}.tar.gz
        if: ${{ !cancelled() }}

      - name: Upload kitcreator package list
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-macos-kc_packages
          path: |
            *.kc_packages
        if: ${{ !cancelled() }}
