name: Build Linux kits
on:
  workflow_dispatch:
  workflow_call:
  push:
    branches: [main]

env:
  TCL_TK_VERSION: 8.6.16
  KC_TLS_LINKSSLSTATIC: 0  # Linux generally has OpenSSL installed
  STATICTK: 0
  STATICTKSVG: 0
  STATICTLS: 1
  STATICTDOM: 1
  STATICPARSE_ARGS: 1
  STATICTCLLIB: 1
  STATICMK4: 1
  KC_MK4TCL_CXXFLAGS: '-fPIC'
  CFLAGS:   '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  CPPFLAGS: '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  CXXFLAGS: '-DNDEBUG -O2 -fomit-frame-pointer -fstack-protector-strong -ffunction-sections -fdata-sections'
  KC_KITSH_LDFLAGS: '-Wl,--gc-sections'

jobs:
  build-linux-kits:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        platform:
          - arch:       x86_64
            pkg_prefix: amd64
            cross_pfx:  x86_64-linux-gnu
            host:       x86_64-pc-linux-gnu
            ssldir:     /usr/lib/x86_64-linux-gnu/pkgconfig

          - arch:       i386
            pkg_prefix: i386
            cross_pfx:  i686-linux-gnu
            host:       i386-pc-linux-gnu
            ssldir:     /usr/lib/i386-linux-gnu/pkgconfig

          - arch:       aarch64
            pkg_prefix: arm64
            cross_pfx:  aarch64-linux-gnu
            host:       aarch64-generic-linux-gnu
            ssldir:     /usr/lib/aarch64-linux-gnu/pkgconfig

          - arch:       armhf
            pkg_prefix: armhf
            cross_pfx:  arm-linux-gnueabihf
            host:       arm-generic-linux-gnu
            ssldir:     /usr/lib/arm-linux-gnueabihf/pkgconfig

          - arch:       riscv64
            pkg_prefix: riscv64
            cross_pfx:  riscv64-linux-gnu
            host:       riscv64-generic-linux-gnu
            ssldir:     /usr/lib/riscv64-linux-gnu/pkgconfig

    env:
      arch:          ${{matrix.platform.arch}}
      pkg_prefix:    ${{matrix.platform.pkg_prefix}}
      suffix:        ${{matrix.platform.arch}}-linux-gnu
      KC_TLS_SSLDIR: ${{matrix.platform.ssldir}}
      CC:            ${{matrix.platform.cross_pfx}}-gcc
      CXX:           ${{matrix.platform.cross_pfx}}-g++
      AR:            ${{matrix.platform.cross_pfx}}-ar
      RANLIB:        ${{matrix.platform.cross_pfx}}-ranlib
      NM:            ${{matrix.platform.cross_pfx}}-nm
      STRIP:         ${{matrix.platform.cross_pfx}}-strip
      HOST:          ${{matrix.platform.host}}

    steps:
      - uses: actions/checkout@v4
      - name: Dump Pkg mirrors
        run: |
          for li in $(ls /etc/apt/sources.list.d/); do
            echo "$li:"
            sudo cat "/etc/apt/sources.list.d/$li"
          done
          echo "/etc/apt/apt-mirrors.txt:"
          sudo cat /etc/apt/apt-mirrors.txt
          echo "/etc/apt/sources.list:"
          sudo cat /etc/apt/sources.list

      - name: Setup dependencies
        run: |
          sudo dpkg --add-architecture ${{env.pkg_prefix}}
          sudo sed -i 's|http://azure.archive.ubuntu.com/ubuntu|http://ports.ubuntu.com/ubuntu-ports|g' \
                 /etc/apt/sources.list /etc/apt/apt-mirrors.txt
          sudo apt-get clean
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
                  build-essential \
                  crossbuild-essential-${{env.pkg_prefix}} \
                  autoconf \
                  libx11-dev:${{env.pkg_prefix}} \
                  libssl-dev:${{env.pkg_prefix}}

      - name: Base kit
        env:
          KITCREATOR_PKGS: mk4tcl
          CC:  x86_64-linux-gnu-gcc
          CXX: x86_64-linux-gnu-g++
          AR:  x86_64-linux-gnu-ar
          RANLIB: x86_64-linux-gnu-ranlib
          NM:     x86_64-linux-gnu-nm
          STRIP:  x86_64-linux-gnu-strip
        run: |
          ./build/pre.sh
          ./kitcreator build ${{env.TCL_TK_VERSION}}
          mv tclkit-${{env.TCL_TK_VERSION}} tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-base
          cat <<EOF > $GITHUB_ENV
          TCLKIT=$(pwd)/tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-base
          TCLSH_NATIVE=$(pwd)/tclkitsh-${{env.TCL_TK_VERSION}}-x86_64-base
          EOF

      - name: Minimal kit (No GUI)
        run: |
          export KITCREATOR_PKGS="$(tr '
          ' " " < .github/workflows/pkgs-nogui-minimal.txt)"
          ./kitcreator clean
          ./kitcreator build ${{env.TCL_TK_VERSION}} --host=${{ env.HOST }} --enable-64bit
          mv tclkit-${{env.TCL_TK_VERSION}} tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
          echo "$KITCREATOR_PKGS" > tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal.kc_packages

      - name: Minimal kit (with GUI)
        run: |
          export KITCREATOR_PKGS="$(tr '
          ' " " < .github/workflows/pkgs-gui-minimal.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --host=${{ env.HOST }} --enable-64bit
          mv tclkit-${{env.TCL_TK_VERSION}} tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
          echo "$KITCREATOR_PKGS" > tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal.kc_packages
          rm -f  tk/.success
          rm -rf tk/{out,inst,build}

      - name: Standard kit (No GUI)
        run: |
          export KITCREATOR_PKGS="$(tr '
          ' " " < .github/workflows/pkgs-nogui-full.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-tcl-private-headers --host=${{ env.HOST }} --enable-64bit
          mv tclkit-${{env.TCL_TK_VERSION}} tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}
          echo "$KITCREATOR_PKGS" > tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}.kc_packages

      - name: Full kit (with GUI)
        run: |
          export KITCREATOR_PKGS="$(tr '
          ' " " < .github/workflows/pkgs-gui-full.txt)"
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-tcl-private-headers --host=${{ env.HOST }} --enable-64bit
          mv tclkit-${{env.TCL_TK_VERSION}} tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}
          echo "$KITCREATOR_PKGS" > tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}.kc_packages

      - name: Kit SDK
        env:
          STATICTK: 1
        run: |
          export KITCREATOR_PKGS="$(tr '
          ' " " < .github/workflows/pkgs-kitdll.txt)"
          clean_all_but_tcl_and_mk4() {
            for pkg in $(ls */build.sh | cut -d/ -f1 | egrep -v '^(tcl|tls|tdom|parse_args|mk4tcl)$'); do
              rm -f  "${pkg}/.success"
              rm -rf "${pkg}/out" "${pkg}/inst" "${pkg}/build"
            done
          }
          clean_all_but_tcl_and_mk4
          ./kitcreator retry ${{env.TCL_TK_VERSION}} --enable-tcl-private-headers --host=${{ env.HOST }} --enable-64bit
          mv libtclkit-sdk-${{env.TCL_TK_VERSION}}.tar.gz libtclkit-sdk-${{env.TCL_TK_VERSION}}-${{env.suffix}}.tar.gz
          echo "$KITCREATOR_PKGS" > libtclkit-sdk-${{env.TCL_TK_VERSION}}-${{env.suffix}}.tar.gz.kc_packages

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-linux-${{env.arch}}-logs
          path: |
            **/build.log
            **/config.log
        if: ${{ !cancelled() }}

      - name: Upload kits
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-linux-${{env.arch}}-kits
          path: |
            tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
            tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}-minimal
            tclkitsh-${{env.TCL_TK_VERSION}}-${{env.suffix}}
            tclkit-${{env.TCL_TK_VERSION}}-${{env.suffix}}
            libtclkit-sdk-${{env.TCL_TK_VERSION}}-${{env.suffix}}.tar.gz
        if: ${{ !cancelled() }}

      - name: Upload kit package list
        uses: actions/upload-artifact@v4
        with:
          name: kitcreator-linux-${{env.arch}}-kc_packages
          path: |
            *.kc_packages
        if: ${{ !cancelled() }}
